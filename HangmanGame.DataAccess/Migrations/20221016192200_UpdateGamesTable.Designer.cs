// <auto-generated />
using HangmanGame.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HangmanGame.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221016192200_UpdateGamesTable")]
    partial class UpdateGamesTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HangmanGame.Models.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LettersGuessed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WordId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("HangmanGame.Models.Models.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "fade"
                        },
                        new
                        {
                            Id = 2,
                            Value = "decorative"
                        },
                        new
                        {
                            Id = 3,
                            Value = "credibility"
                        },
                        new
                        {
                            Id = 4,
                            Value = "killer"
                        },
                        new
                        {
                            Id = 5,
                            Value = "foreigner"
                        },
                        new
                        {
                            Id = 6,
                            Value = "notice"
                        },
                        new
                        {
                            Id = 7,
                            Value = "hiccup"
                        },
                        new
                        {
                            Id = 8,
                            Value = "eternal"
                        },
                        new
                        {
                            Id = 9,
                            Value = "age"
                        },
                        new
                        {
                            Id = 10,
                            Value = "key"
                        },
                        new
                        {
                            Id = 11,
                            Value = "surface"
                        },
                        new
                        {
                            Id = 12,
                            Value = "activate"
                        },
                        new
                        {
                            Id = 13,
                            Value = "discount"
                        });
                });

            modelBuilder.Entity("HangmanGame.Models.Models.Game", b =>
                {
                    b.HasOne("HangmanGame.Models.Models.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Word");
                });
#pragma warning restore 612, 618
        }
    }
}
